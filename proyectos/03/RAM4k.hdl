CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    // Demultiplexes the load signal into 8 separate signals
    // based on the three most significant bits of the address.
    DMux8Way(in=load, sel=address[9..11], a=loada, b=loadb, c=loadc, d=loadd, e=loade, f=loadf, g=loadg, h=loadh);
    
    // Eight instances of RAM512, each handling 512 memory locations
    // with its own load signal and 9-bit address.
    RAM512(in=in, load=loada, address=address[0..8], out=outa);
    RAM512(in=in, load=loadb, address=address[0..8], out=outb);
    RAM512(in=in, load=loadc, address=address[0..8], out=outc);
    RAM512(in=in, load=loadd, address=address[0..8], out=outd);
    RAM512(in=in, load=loade, address=address[0..8], out=oute);
    RAM512(in=in, load=loadf, address=address[0..8], out=outf);
    RAM512(in=in, load=loadg, address=address[0..8], out=outg);
    RAM512(in=in, load=loadh, address=address[0..8], out=outh);
    
    // Multiplexes the output of the 8 RAM512 instances
    // based on the three most significant bits of the address
    // to select the appropriate output data.
    Mux8Way16(a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh, sel=address[9..11], out=out);    
}
